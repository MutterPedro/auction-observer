package br.com.auction.observer;

import java.util.Observable;
import java.util.Observer;
import java.util.Random;

import br.com.auction.subject.Auctioneer;

public class Bidder implements Observer{

	private double actualBid; 
	private boolean winner;
	
	

	public double getActualBid() {
		return actualBid;
	}

	public void setActualBid(double actualBid) {
		this.actualBid = actualBid;
	}

	public boolean isWinner() {
		return winner;
	}

	public void setWinner(boolean winner) {
		this.winner = winner;
	}

	public double tryNewBid(){
		Random rand = new Random();
		double randomBid = rand.nextDouble();
		return randomBid;
	}

	@Override
	public void update(Observable o, Object arg) {
		this.setBid((double) arg);		
		Auctioneer auctioneer = (Auctioneer) o;
		while(!auctioneer.coverBid(tryNewBid())){
			try {
			    Thread.sleep(1000);            
			} catch(InterruptedException ex) {
			    Thread.currentThread().interrupt();
			}
		}
	}
	
}
